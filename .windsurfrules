##################################################################################################
# FatToFit Program Authoring Platform — .windsurfrules
##################################################################################################

📘 Introduction  
App Name: FatToFit Program Authoring  
Version: 0.1.0  
Maintainer: PinkLambo  
Platform: Admin-only authoring tool to define and manage structured workout content for the FatToFit mobile app.

---

## ⚙️ Tech Stack

### 🖥 Frontend
- Framework: Vue 3  
- Build Tool: Vite  
- Language: TypeScript (TS-first)  
- CSS Framework: Tailwind CSS (v3.4.4)  
- State Management: Pinia + pinia-plugin-persistedstate  
- UI Engine: Vue Flow (planned for visual drag-and-drop program builder)

### 🔐 Backend
- Firebase Authentication (email/password)
- Firestore (document-based NoSQL for programs, exercises)
- Firebase SDK (modular Web v9)

---

## 📁 Folder Structure (simplified)

```
src/
├── assets/                # Static assets (icons, images, logos)
├── boot/                  # Quasar/Vue plugin initializers (e.g., firebase.ts, pinia.ts)
├── components/            # Reusable Vue components
│   ├── auth/              # Login, Register, RoleSelector.vue
│   ├── workout/           # Workout UI (e.g., WorkoutDayCard, ExerciseProgressDots)
│   └── shared/            # Generic UI (e.g., BaseButton, ModalWrapper)
├── composables/           # Reusable logic (e.g., useWorkout.ts, useAuth.ts, useCache.ts)
├── layouts/               # Page layout wrappers (e.g., MainLayout.vue, AdminLayout.vue)
├── pages/                 # Route-level views (e.g., ProgramWeekSummary.vue)
│   ├── IndexPage.vue
│   ├── LoginPage.vue
│   ├── WorkoutDetail.vue
│   └── AdminCreateUser.vue
├── router/                # Vue Router configuration and guards
│   └── index.ts
├── services/              # API/Firestore abstraction logic
│   ├── authService.ts
│   ├── programService.ts
│   ├── exerciseService.ts
│   └── userService.ts
├── stores/                # Pinia stores (persisted)
│   ├── useAuthStore.ts
│   ├── useProgramStore.ts
│   ├── useExerciseStore.ts
│   ├── useUserProgressStore.ts
│   └── useUserPreferencesStore.ts
├── types/                 # Shared TypeScript interfaces and types
│   └── models.ts
├── utils/                 # General utility functions (e.g., date.ts, firestoreHelpers.ts)
├── App.vue
├── main.ts
└── quasar.conf.ts         # Quasar CLI config (if using Quasar CLI)

```

---

🔐 Roles-Based Access Control (Add to 
.windsurfrules
)
Roles Collection:
Firestore collection roles/{uid} maps each user to their role(s), e.g.:
ts
// Firestore: roles/{uid}
{
  role: "admin" // or "author", "viewer", etc.
}
Workflow:
After login, the app fetches the user's role from Firestore.
The Pinia auth store tracks the current user's role.
Vue Router guards check both authentication and required role for protected routes.
UI elements are conditionally shown/hidden based on user role.


---

## 🔧 ESLint + VS Code

- ESLint initialized with Vue 3 + TypeScript + JSON + Browser environment
- `.eslintrc.js` created using `eslint --init`
- Optional Tailwind plugin to be added (`eslint-plugin-tailwindcss`)
- `.vscode/settings.json` configured for:
  ```json
  {
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": true
    },
    "eslint.validate": ["javascript", "typescript", "vue", "json"]
  }
  ```

---

## 🔐 Firebase Configuration

- Firebase installed via `npm install firebase`
- `src/firebase.ts` configures:
  - `getAuth()` for email/password login
  - `getFirestore()` for reading/writing structured content

---

## 🔐 Authentication Strategy

- Email/password authentication enabled
- Pinia store (`useAuthStore.ts`) tracks:
  - `firebaseUser`
  - `login()`, `logout()`, `bindAuthListener()`
- Optional route guard via Vue Router:
  ```ts
  router.beforeEach((to, from, next) => {
    const authStore = useAuthStore()
    if (!authStore.firebaseUser && to.meta.requiresAuth) {
      return next('/login')
    }
    next()
  })
  ```

---

## 🧠 Firestore Data Model (Authoring Source of Truth)

### 🔘 Collection: `programs`
```ts
Program {
  programId: string
  title: string
  weeks: Week[]
}
```

### 🔘 Subcollection: `programs/{programId}/weeks/{weekNumber}`
```ts
Week {
  weekNumber: number
  days: WorkoutDay[]
}
```

### 🔘 `WorkoutDay`
```ts
WorkoutDay {
  dayOfWeek: string
  focus: string
  warmUp: ExerciseReference[]
  main: ExerciseReference[]
  warmDown: ExerciseReference[]
}
```

### 🔘 Collection: `exercises`
```ts
Exercise {
  exerciseId: string
  name: string
  detail: string
  muscleGroups: string[]
  equipment: string[]
  imageUrl?: string
  videoUrl?: string
  coachingNotes?: string
  type: "main" | "warm-up" | "warm-down"
  defaultSets?: number
  repsPerSet?: number[]
  weightPerSet?: number[]
  duration?: number // for warm-up
}
```

---

## ✅ Installed Dependencies

```json
"dependencies": {
  "firebase": "^X.Y.Z",
  "pinia": "^2.1.7",
  "pinia-plugin-persistedstate": "^X.Y.Z",
  "vue": "^3.4.27"
},
"devDependencies": {
  "@vitejs/plugin-vue": "^5.0.5",
  "eslint": "^X.Y.Z",
  "eslint-plugin-vue": "^X.Y.Z",
  "@vue/eslint-config-typescript": "^X.Y.Z",
  "tailwindcss": "^3.4.4",
  "typescript": "~5.4.5",
  "vite": "^5.2.13"
}
```

---

## 🔜 Next Milestones

- [ ] Add `LoginPage.vue` and protected route logic
- [ ] Add `ProgramAuthor.vue` using Vue Flow canvas
- [ ] Implement drag-and-drop for Weeks, Days, Exercises
- [ ] Export authored data to Firestore (`programs/{id}`, `exercises/{id}`)
- [ ] Integrate role-based access (`roles/{uid}` collection)
- [ ] Create Firestore Seeder CLI or JSONL export support

---

## 📦 Environment Notes

- Node.js: `v22.0.0` (with workaround for Tailwind v4 CLI by pinning to v3.4.4)
- ESLint initialized via `npx eslint --init`
- Project is configured as **TypeScript-first** with full linting, persisted state, and Firebase bootstrapped

##################################################################################################

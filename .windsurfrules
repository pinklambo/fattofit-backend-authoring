##################################################################################################
# FatToFit Program Authoring Platform — .windsurfrules
##################################################################################################

##################################################################################################
# 🔗 Cross-Codebase Awareness
##################################################################################################

## 💡 Purpose
This section ensures shared data models and caching logic remain aligned across all FatToFit codebases:
- `fattofit-backend` (Authoring UI)
- `fattofit-frontend` (User-facing Capacitor app)
- `fattofit-seeder` (Firestore seeding CLI)

---

## 📦 Codebase Links

| Name                | Path / Repo              | Purpose                                  |
|---------------------|---------------------------|-------------------------------------------|
| `fattofit-frontend` | `../fattofit-frontend`    | Capacitor app (Vue 3 + Pinia + Firebase) |
| `fattofit-seeder`   | `../fattofit-seeder`      | CLI to seed Firestore content            |

---

## 🧩 Shared Models

All three projects use the following data interfaces:

- `Program`, `Week`, `WorkoutDay`, `Exercise`, `UserProgress`, `UserPreferences`
- Stored in: `types/models.ts` (each project should reference a canonical version)

**🔁 Canonical model source:**  
> Consider storing shared types in a central package like `@fattofit/models`  
> (using a local workspace or NPM registry)

---

## 🧠 Shared Logic Expectations

### 🔄 Content Caching Logic (Frontend / Backend Sync)
- Based on `config/content` document:
```ts
{
  contentVersion: number,
  updatedAt: Timestamp
}

##################################################################################################
# 📚 FatToFit Program Authoring Platform Project Metadata
##################################################################################################

📘 Introduction  
App Name: FatToFit Program Authoring  
Version: 0.1.0  
Maintainer: PinkLambo  
Platform: Admin-only authoring tool to define and manage structured workout content for the FatToFit mobile app.

---

## ⚙️ Tech Stack

### 🖥 Frontend
- Framework: Vue 3  
- Build Tool: Vite  
- Language: TypeScript (TS-first)  
- CSS Framework: Tailwind CSS (v3.4.4)  
- State Management: Pinia + pinia-plugin-persistedstate  
- UI Engine: Vue Flow (planned for visual drag-and-drop program builder)

### 🔐 Backend
- Firebase Authentication (email/password)
- Firestore (document-based NoSQL for programs, exercises)
- Firebase SDK (modular Web v9)

---

## 📁 Folder Structure (simplified)

```
src/
├── assets/                # Static assets (icons, images, logos)
├── boot/                  # Quasar/Vue plugin initializers (e.g., firebase.ts, pinia.ts)
├── components/            # Reusable Vue components
│   ├── auth/              # Login, Register, RoleSelector.vue
│   ├── workout/           # Workout UI (e.g., WorkoutDayCard, ExerciseProgressDots)
│   └── shared/            # Generic UI (e.g., BaseButton, ModalWrapper)
├── composables/           # Reusable logic (e.g., useWorkout.ts, useAuth.ts, useCache.ts)
├── layouts/               # Page layout wrappers (e.g., MainLayout.vue, AdminLayout.vue)
├── pages/                 # Route-level views (e.g., ProgramWeekSummary.vue)
│   ├── IndexPage.vue
│   ├── LoginPage.vue
│   ├── WorkoutDetail.vue
│   └── AdminCreateUser.vue
├── router/                # Vue Router configuration and guards
│   └── index.ts
├── services/              # API/Firestore abstraction logic
│   ├── authService.ts
│   ├── programService.ts
│   ├── exerciseService.ts
│   └── userService.ts
├── stores/                # Pinia stores (persisted)
│   ├── useAuthStore.ts
│   ├── useProgramStore.ts
│   ├── useExerciseStore.ts
│   ├── useUserProgressStore.ts
│   └── useUserPreferencesStore.ts
├── types/                 # Shared TypeScript interfaces and types
│   └── models.ts
├── utils/                 # General utility functions (e.g., date.ts, firestoreHelpers.ts)
├── App.vue
├── main.ts
└── quasar.conf.ts         # Quasar CLI config (if using Quasar CLI)

```

---

🔐 Roles-Based Access Control (Add to 
.windsurfrules
)
Roles Collection:
Firestore collection roles/{uid} maps each user to their role(s), e.g.:
ts
// Firestore: roles/{uid}
{
  role: "admin" // or "author", "viewer", etc.
}
Workflow:
After login, the app fetches the user's role from Firestore.
The Pinia auth store tracks the current user's role.
Vue Router guards check both authentication and required role for protected routes.
UI elements are conditionally shown/hidden based on user role.


---

## 🔧 ESLint + VS Code

- ESLint initialized with Vue 3 + TypeScript + JSON + Browser environment
- `.eslintrc.js` created using `eslint --init`
- Optional Tailwind plugin to be added (`eslint-plugin-tailwindcss`)
- `.vscode/settings.json` configured for:
  ```json
  {
    "editor.codeActionsOnSave": {
      "source.fixAll.eslint": true
    },
    "eslint.validate": ["javascript", "typescript", "vue", "json"]
  }
  ```

---

## 🔐 Firebase Configuration

- Firebase installed via `npm install firebase`
- `src/firebase.ts` configures:
  - `getAuth()` for email/password login
  - `getFirestore()` for reading/writing structured content

---

## 🔐 Authentication Strategy

- Email/password authentication enabled
- Pinia store (`useAuthStore.ts`) tracks:
  - `firebaseUser`
  - `login()`, `logout()`, `bindAuthListener()`
- Optional route guard via Vue Router:
  ```ts
  router.beforeEach((to, from, next) => {
    const authStore = useAuthStore()
    if (!authStore.firebaseUser && to.meta.requiresAuth) {
      return next('/login')
    }
    next()
  })
  ```

---

## 🧠 Firestore Data Model (Authoring Source of Truth)

data_model:
  collections:
    - fattofit_program:
        fields:
          - programId: string
          - title: string
          - durationWeeks: number
          - daysPerWeek: number
          - weeks: array(object) # See below for week/day structure
          - createdAt: timestamp
          - updatedAt: timestamp

    - fattofit_week:
        parent: fattofit_program
        fields:
          - weekNumber: number
          - days: array(object) # inline representation of WorkoutDay[]
          - createdAt: timestamp
          - updatedAt: timestamp

    - workout_day:
        fields:
          - dayOfWeek: string            # e.g. 'Monday'
          - focus: string                # e.g. 'Upper Body Push + Cardio'
          - warmUp: array(object)        # array of ExerciseReference
          - main: array(object)          # array of ExerciseReference
          - warmDown: array(object)      # array of ExerciseReference

    - muscle_category:
      fields:
        - id: string            # canonical ID (e.g. 'upper-body')
        - label: string         # display name for UI (e.g. 'Upper Body')
        - icon: string          # optional UI icon (e.g. 'mdi-arm-flex')
        - sortOrder: number     # for controlling UI sort/grouping
        - createdAt: timestamp
        - updatedAt: timestamp

    - muscle_group:
      fields:
        - id: string            # canonical ID (e.g. 'chest')
        - label: string         # display name (e.g. 'Chest')
        - categoryId: string    # FK reference to `muscle_category.id`
        - createdAt: timestamp
        - updatedAt: timestamp
          
    - fattofit_exercise:
      fields:
        - exerciseId: string
        - type: string # ['main', 'warm-up', 'warm-down']
        - name: string
        - detail: string
        - muscleGroups: array(string)
        - equipment: array(string)
        - videoUrl: string
        - imageUrl: string
        - coachingNotes: string
        - defaultSets: number          # only for 'main'
        - defaultReps: number          # only for 'main'
        - defaultWeight: number        # only for 'main'
        - weightPerSet: array(number)  # only for 'main'
        - repsPerSet: array(number)    # only for 'main'
        - duration: number             # only for 'warm-up'
        - createdAt: timestamp
        - updatedAt: timestamp

    - fattofit_warmup:
        fields:
          - exerciseId: string
          - name: string
          - detail: string
          - muscleGroups: array(string)
          - equipment: array(string)
          - videoUrl: string
          - imageUrl: string
          - coachingNotes: string
          - type: string
          - duration: number

    - fattofit_warmdown:
        fields:
          - exerciseId: string
          - name: string
          - detail: string
          - muscleGroups: array(string)
          - equipment: array(string)
          - videoUrl: string
          - imageUrl: string
          - coachingNotes: string
          - type: string
          - duration: number

    - fattofit_user:
      fields:
        - uid: string                # Firebase UID (used as doc ID)
        - email: string
        - name: string
        - role: string               # 'superadmin', 'admin', 'user', etc.
        - createdAt: timestamp
        - updatedAt: timestamp

    - fattofit_app_meta:
        fields:
          - id: string
          - name: string
          - appVersion: string
          - contentVersion: string
          - updatedAt: timestamp

---

## ✅ Installed Dependencies

```json
"dependencies": {
  "firebase": "^X.Y.Z",
  "pinia": "^2.1.7",
  "pinia-plugin-persistedstate": "^X.Y.Z",
  "vue": "^3.4.27"
},
"devDependencies": {
  "@vitejs/plugin-vue": "^5.0.5",
  "eslint": "^X.Y.Z",
  "eslint-plugin-vue": "^X.Y.Z",
  "@vue/eslint-config-typescript": "^X.Y.Z",
  "tailwindcss": "^3.4.4",
  "typescript": "~5.4.5",
  "vite": "^5.2.13"
}
```

---

## 🔜 Next Milestones

- [ ] Add `LoginPage.vue` and protected route logic
- [ ] Add `ProgramAuthor.vue` using Vue Flow canvas
- [ ] Implement drag-and-drop for Weeks, Days, Exercises
- [ ] Export authored data to Firestore (`programs/{id}`, `exercises/{id}`)
- [ ] Integrate role-based access (`roles/{uid}` collection)
- [ ] Create Firestore Seeder CLI or JSONL export support

---

## 📦 Environment Notes

- Node.js: `v22.0.0` (with workaround for Tailwind v4 CLI by pinning to v3.4.4)
- ESLint initialized via `npx eslint --init`
- Project is configured as **TypeScript-first** with full linting, persisted state, and Firebase bootstrapped

##################################################################################################
